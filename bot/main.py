import re
import vk_api
import redis
from vk_api.longpoll import VkLongPoll, VkEventType

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VK_TOKEN = "vk1.a.eOPbWls0EX6UZtShsBPC1-0zLPlM3jdqalpPELbR9-fugFAXSbFIakYEDf6axzK6mROKtR3tRFN_F1bhD1s2NAPlfywIQIz6GSa83rPo1uLXWB11C_vaTUr2ofMsVWCpigSE159RA4e9besVebLSRRc6U7S0Sq4_k0CRcmFSD0Ra7WonZNWopVelJYoMBlVrUoby6KF6xhfZpwniVuevPg"
GROUP_ID = 225244314  # –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
MANAGER_IDS = [37199556, 143586526]
REDIS_HOST = "redis"
REDIS_PORT = 6379
SESSION_TTL = 3600  # 1 —á–∞—Å

vk_session = vk_api.VkApi(token=VK_TOKEN)
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

r = redis.StrictRedis(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def validate_name(name):
    pattern = r"^[–ê-–Ø–∞-—è–Å—ëA-Za-z-]{2,}\s[–ê-–Ø–∞-—è–Å—ëA-Za-z-]{2,}(\s[–ê-–Ø–∞-—è–Å—ëA-Za-z-]{2,})?$"
    return re.match(pattern, name)

def validate_phone(phone):
    clean_phone = re.sub(r"\D", "", phone)
    return clean_phone.startswith(("7", "8")) and len(clean_phone) == 11

def validate_city(city):
    pattern = r"^[–ê-–Ø–∞-—è–Å—ëA-Za-z\s-]{2,}$"
    return re.match(pattern, city)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(user_id, message):
    vk.messages.send(user_id=user_id, message=message, random_id=0)

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
def clear_expired_sessions():
    for key in r.keys("user:*"):
        if r.ttl(key) == -1:
            r.delete(key)

def start_bot():
    for event in longpoll.listen():

        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_id = event.user_id
            key = f"user:{user_id}"
            stage = r.hget(key, "stage")
            r.expire(key, SESSION_TTL)

            if not stage:
                r.hset(key, "stage", "wait_for_consent")
                stage = "wait_for_consent"

            text = event.text.strip().lower()

            if stage == "wait_for_consent":
                if text == "–¥–∞":
                    send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É:")
                    r.hset(key, "stage", "ask_question")
                else:
                    send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! üòä –≠—Ç–æ –±–æ—Ç –Ω–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ –†–µ–∫—Ä—É—Ç–µ—Ä –æ—Ç –† –¥–æ –† ‚Äî —Ç–≤–æ—è –Ω–æ–≤–∞—è —É–¥–∞–ª—ë–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ ‚Äî –î–ê, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")

            elif stage == "ask_question":
                r.hset(key, "question", event.text)
                send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
                r.hset(key, "stage", "get_name")

            elif stage == "get_name":
                if validate_name(event.text):
                    r.hset(key, "name", event.text)
                    send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                    r.hset(key, "stage", "get_phone")
                else:
                    send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")

            elif stage == "get_phone":
                if validate_phone(event.text):
                    r.hset(key, "phone", event.text)
                    send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
                    r.hset(key, "stage", "get_city")
                else:
                    send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

            elif stage == "get_city":
                if validate_city(event.text):
                    r.hset(key, "city", event.text)
                    name = r.hget(key, "name")
                    phone = r.hget(key, "phone")
                    city = r.hget(key, "city")
                    question = r.hget(key, "question")

                    summary = (
                        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.ru/id{user_id}\n"
                        f"–§–ò–û: {name}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                        f"–ì–æ—Ä–æ–¥: {city}\n"
                        f"–í–æ–ø—Ä–æ—Å: {question}"
                    )
                    for manager_id in MANAGER_IDS:
                        send_message(manager_id, summary)
                    send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")
                    r.delete(key)
                else:
                    send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

        # elif event.type == VkEventType.GROUP_JOIN:
        #     user_id = event.user_id
        #     key = f"user:{user_id}"
        #     send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! üòä —ç—Ç–æ –±–æ—Ç –Ω–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ –†–µ–∫—Ä—É—Ç–µ—Ä –æ—Ç –† –¥–æ –†, —Ç–≤–æ—è –Ω–æ–≤–∞—è —É–¥–∞–ª–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ ‚Äî –î–ê, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")
        #     r.hset(key, "stage", "wait_for_consent")
        #     r.expire(key, SESSION_TTL)

if __name__ == "__main__":
    start_bot()
